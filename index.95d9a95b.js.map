{"mappings":"YA6OAA,QAAQC,IAAI,kCAAmC,gCAE/C,IAAMC,EAVS,CACb,WACA,UACA,kBACA,aACA,cAKsBC,KAmBxB,SAAcC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IANmBC,EAAKC,EAMlBC,GANaF,EAMQ,IANHC,EAMS,KAL5BE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOlDM,YAAW,WACTR,EAAQ,CAAEF,QAAOM,Q,GAChBA,E,OAvBPL,QAAQU,KAAKb,GACVc,MAAK,SAAAC,G,IAAGb,EAAKa,EAALb,MAAOM,EAAIO,EAAJP,KACdV,QAAQC,IACN,aAAqCiB,OAAxBd,EAAM,oBAAuBc,OAALR,GACrC,gC,IAGHS,OAAM,SAAAC,G,OAAKpB,QAAQC,IAAImB,E,IAE1Bf,QAAQgB,IAAInB,GAAUc,MAAK,WACzBhB,QAAQC,IAAI,gCAAiC,gC","sources":["src/js/01-js.js"],"sourcesContent":["// import BSN from 'bootstrap.native';\n// console.log('before set timeout');\n\n// setTimeout(\n//   x => {\n//     console.log(x);\n//     console.log('1 in set timeout');\n//   },\n//   2000,\n//   5\n// );\n\n// setTimeout(\n//   y => {\n//     console.log(y);\n//     console.log('2 in set timeout');\n//   },\n//   100,\n//   10\n// );\n\n// console.log('after set timeout');\n\n// const logger = time => {\n//   console.log(`log by ${time}`);\n// };\n\n// const timerId = setTimeout(logger, 2000, 2000);\n// console.log(timerId);\n\n// const shouldCancelTimer = Math.random() > 0.3;\n// console.log(shouldCancelTimer);\n\n// if (shouldCancelTimer) {\n//   clearTimeout(timerId);\n// }\n\n// const logger = time => console.log(`log everyone ${time}ms - ${Date.now()}`);\n\n// console.log('before setInterval');\n// // setInterval(logger, 2000, 2000);\n// console.log('after setInterval');\n\n// const intervalId = setInterval(logger, 2000, 2000);\n// const shouldCancelInterval = Math.random() > 0.3;\n// console.log(shouldCancelInterval);\n\n// if (shouldCancelInterval) {\n//   clearInterval(intervalId);\n// }\n\n// const intarvalId = setInterval(() => {\n//   if (promptCounter === MAX_PROMPT_ATTEMPTS || hasSubscription) {\n//     console.log('stoped interval');\n//     clearInterval(intarvalId);\n//     return;\n//   }\n\n//   console.log('subsribe - ' + Date.now());\n//   promptCounter += 1;\n// }, PROMP_DELAY);\n\n// const refs = {\n//   modal: document.querySelector('#subscription-modal'),\n//   subscribeBTN: document.querySelector('button[data-subscribe]'),\n// };\n// const PROMPT_DELAY = 1000;\n// const MAX_PROMPT_ATTEMPTS = 3;\n// const modal = new BSN.Modal('#subscription-modal');\n// let promptCounter = 0;\n// let hasSubscription = false;\n\n// openModal();\n\n// refs.modal.addEventListener('hide.bs.modal', openModal);\n\n// refs.subscribeBTN.addEventListener('click', onSubscribeBtnClick);\n\n// function openModal() {\n//   if (promptCounter === MAX_PROMPT_ATTEMPTS || hasSubscription) {\n//     return;\n//   }\n\n//   setTimeout(() => {\n//     modal.show();\n//     promptCounter += 1;\n//   }, PROMPT_DELAY);\n// }\n\n// function onSubscribeBtnClick() {\n//   hasSubscription = true;\n//   modal.hide();\n// }\n\n// const date = Date.now();\n\n// setTimeout(() => {\n//   const date2 = Date.now();\n\n//   console.log(date);\n//   console.log(date2);\n//   console.log(date2 - date);\n// }, 3000);\n\n// const timer = {\n//   start() {\n//     const startTime = Date.now();\n\n//     setInterval(() => {\n//       const curentTime = Date.now();\n//       const deltaTime = curentTime - startTime;\n//       const { hours, mins, secs } = getTimeComponents(deltaTime);\n\n//       //   console.log(curentTime);\n//       console.log(`${hours}:${mins}:${secs}`);\n//     }, 1000);\n//   },\n// };\n\n// // timer.start();\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function getTimeComponents(time) {\n//   const hours = pad(\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n//   );\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//   return { hours, mins, secs };\n// }\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('This fine');\n//     }\n\n//     reject('This fail');\n//   }, 1000);\n// });\n\n// // promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//   console.log(result);\n// }\n\n// function onRejected(error) {\n//   console.log(error);\n// }\n\n// // console.log(promise);\n\n// promise\n//   .then(onFulfilled, onRejected)\n//   .then(result => {\n//     console.log(result);\n\n//     return 5;\n//   })\n//   .then(x => {\n//     console.log(x);\n\n//     return x + x;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => {\n//     console.log('i finished');\n//   });\n\n// const makeOrder = dish => {\n//   const DELAY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('this is your dish');\n//       } else {\n//         reject('sorry not a product');\n//       }\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('pirojok').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n// const makeOrder = dish => {\n//   return Promise.resolve('this is your dish');\n// };\n\n// makeOrder('pirojok').then(onMakeOrderSuccess);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n// const makePromise = () => {\n//   return new Promise((reslove, reject) => {\n//     reslove('this work');\n//   });\n// };\n\n// makePromise().then(result => console.log(result));\nconst horses = [\n  'Secretar',\n  'Eclipse',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscuit',\n];\n\nconsole.log('%c Rasing Start rates not give!', 'color: red; font-size: 14px;');\n\nconst promises = horses.map(race);\n\nPromise.race(promises)\n  .then(({ horse, time }) => {\n    console.log(\n      `%c Winner ${horse}, finished time ${time}`,\n      'color: green; font-size:14px;'\n    );\n  })\n  .catch(e => console.log(e));\n\nPromise.all(promises).then(() => {\n  console.log('%c Race finished, rates give!', 'color: blue; font-size: 14px;');\n});\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction race(horse) {\n  return new Promise((reslove, reject) => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      reslove({ horse, time });\n    }, time);\n  });\n}\n"],"names":["console","log","$3a8232a89924ec25$var$promises","map","horse","Promise","reslove","reject","min","max","time","Math","floor","random","setTimeout","race","then","param","concat","catch","e","all"],"version":3,"file":"index.95d9a95b.js.map"}